Java反射机制：
	在程序运行过程中，对于任何一个类，都可以知道它的所有属性和方法。对于任意一个对象，都能够知道调用它的任意属性和方法，这种动态获取信息以及动态调用对象的功能称为Java语言的反射机制
Java反射提供的一下这几个功能
	在运行时判断任意一个对象所属的类
	在运行时构造任意一个类的对象
	在运行时判断任意一个类所有的成员变量和方法
	在运行时任意调用一个对象的方法

获取类型实例的方式
	Class.forName(java.lang.Object)
	Object.class
	object.getClass()

newInstance()
	创建一个类的实例，代表这个类的对象
	forName()方法对进行初始化，newInstance()方法对类进行实例化

getClassLoader()
	获取类加载器对象
getTypeParameters()
	按照声明的顺序获取对象的参数信息
getPackage()
	返回类的包
getInterfaces()
	获取当前类实现的类或接口，返回Class数组
Cast
	把对象转成代表类或是接口的对象
asSubclass(Class cls)
	把传递的类的对象转换成代表其子类的对象
getClasses()
	返回一个数组，数组中包含该类中所有类和接口的对象
getDeclaredClasses()
	返回一个数组，数组中包含数组中包含该类中所以类和接口类的对象
getSimpleName()
	获取类的名称

getFields()
	获取所有公有属性变量
getField(String name)
	获取某个公有属性变量
getDeclaredFields()
	获取所有属性变量
getDeclaredField(String name)
	获取某个属性变量

getAnnotation(Class annotationClass)
	返回该类中与参数类型匹配的公有注解对象
getAnnotations()
	返回该类所有的公有注解对象
getDeclareAnnotations()
	获取该类所有的注解对象
getDeclareAnnotation(Class annotationClass)
	返回该类中与参数类型匹配的所有注解对象

getConstructors(Class...<?> parameterTypes)
	获取该类中与参数类型匹配的公有构造方法
getConstructors()
	获取该类的所有公有构造方法
getDeclaredConstructor(Class...<?> parameterTypes)
	获取该类中与参数类型匹配的构造方法
getDeclaredConstructors()
	获取该类中所有构造方法

getMethod(String name, Class...<?> parameterTypes)
	获取该类某个公有方法
getMethods()
	获取该类所有公有方法
getDeclaredMethod(String name, Class...<?> parameterTypes)
	获取该类某个方法
getDeclaredMethods()
	获取该类所有方法

Field
	提供类或接口中单独字段的信息，以及对单独字段的动态访问
Method
	Invoke(Object obj, Object... args)：传递obcjet对象及参数调用该对象对应的方法
ClassLoader
	类装载器是用来把类（Class）装载进JVM的，ClassLoader使用的是双亲委托模型来搜索加载类的

双亲委派模型
	双亲委派模型要求除了顶层的启动类加载器外，其余类加载器都应当有自己的父类加载器
	双亲委派模式中的父子关系并非通常所说的集成关系，而是采用组合关系来复用父类加载器的相关代码
工作原理
	如果一个类加载器收到了类加载请求，它不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器，如果父类加载器能完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载
优势
	带有优先级层次关系，可以避免类的重复加载，当父类已经加载了该类时，就没有必要子ClassLoader再加载一次
	防止核心API库被随意篡改
