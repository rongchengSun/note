java 知识点总结
-------------------------------------一、Java概念-----------------------------------------
Java组成：编程语言、计算平台

Java SE(J2SE)(Java2 Platform Standard Edition, Java平台标准版) 
Java EE(J2EE)(Java2 Platform, Enterprise Edition, Java平台企业版)
Java ME(J2ME)(Java2 Platform Micro Edition, Java平台微型版)

Java特点：面向对象（Object Oriented）的编程语言

面向对象概念：现实世界抽象化，把相关数据和方法组织成一个整体

面向过程特征
	以过程为中心，顺序性完成一系列动作

面向对象特征
	1.不用按照固定顺序执行每个动作
	2.不用手动管理对象的生命周期
	3.简单易用和功能强大
	4.静态语言，编译期定义数据类型，执行高效，运行速度快
	5.依赖JVM，平台独立性和可移植性
	6.在用户空间实现多线程，内核无感知
	7.高性能（JVM内嵌的JIT编译器/动态编辑器）

从操作系统的角度来说，实现多线程的几种方式
	在用户空间中实现多线程
	在内核空间中实现多线程
	在用户和内核空间中混合实现多线程

高级编程语言程序执行方式
	1.编译执行：程序语句先通过编译器（负责将一条语句翻译成多条机器指令）翻译成机器指令然后执行
	2.解释执行：程序语句逐条被解释器解释执行，不需要编译成机器指令
	3.编译+解释执行：程序先被编译成字节码文件，然后字节码被解释器解释执行

程序执行步骤
	java代码→字节码(bytecode,javac编译器编译)→机器代码(JVM内嵌解释器将字节码转为机器代码)

JDK(Java Development Kit):Java开发标准工具包，包含JRE

Java运行环境(Java Runtime Environment)：Java运行环境

-------------------------------------二、Java基本语法-----------------------------------------

数据类型
	整数型：
		byte:字节 = 8 bits(位)，默认值0
		short：2字节 = 16 bits，默认值0
		int：4字节 = 32 bits，默认值0
		long：8字节 = 64 bits，默认值0L
		占用空间大小排序：
			byte < short < int < long
	浮点型：
		float：单精度浮点，4字节 = 32 bits，默认值0
		double：双精度浮点，8字节 = 64 bits，默认值0.0d
	字符型：
		char：2字节 = 16 bits(Unicode)，默认值\u000(=0)
	布尔型：
		boolean

逻辑运算符
	&&：短路与
	||：短路或
	！：非
	& ：与
	| ：非
	^ ：异或，转二级制同位比较，相同则0，否为1

位运算符
	&：与，两个操作数中位都为1，结果1，否则0
	|：或，两位只要有一个为1，结果为1，否则0
	~：非，如果位为0，结果为1，如果位为1，结果为0
	^：异或，两位相同为0，不同为1

移位运算符
	<<：左移，将运算符左边对象向左移动右边指定位数（低位补0）
	>>：右移（有符号），将运算符左边对象向右移动右边指定位数（值为正，高位补0；值为负，高位补1）
	>>>：右移（无符号），将运算符左边对象向右移动右边指定位数（无论正负值，高位补0）


-------------------------------------三、面向对象-----------------------------------------
类组成部分
	静态属性：static开头定义的属性
	静态方法快：static{}代码块
	普通属性：属性
	方法快：｛｝代码块
	构造函数：类名相同的方法
	方法：普通方法

初始化顺序
	静态属性初始化 → 静态方法块初始化 → 普通属性初始化 → 普通方法快初始化 → 构造函数初始化

作用域
	作用域决定了其内部定义的变量名的可见性和生命周期

多态
	同一行为具有多个不同的表现形式，指一个类实例（对象）的相同的方法在不同的情形下不同的表现形式
实现多态的条件
	集成
	重写父类的方法
	父类的引用指向子类对象

组合和继承区别
	特征		 组合 		      继承
	关系 		 has-a 			is-a
	耦合度		松耦合		     紧耦合
	是否多态	       不具备和向上转型		多态基础，可以实现向上转型
	时期		运行期绑定		    编译器绑定

向上转型
	通过子类对象（小范围）转化为父类对象(大范围)，自动完成，不用强制
向下转型
	通过父类对象（大范围）实例化子类对象(小范围)，需要强制指定

static
	静态方法没有this关键字



-------------------------------------四、异常-----------------------------------------

Throwable
	Java语言中所有错误(errors)和异常(exceptions)的父类，只有继承于Throwable的类或者其子类才能被抛出，或者带有@throw注解的类

Throwable组成：
	Error
	Exception

Exception组成：
	RuntimeException
	CheckedException

常见异常及其分类
	RuntimeException
		ArrayIndexOutOfBoundsExceptions：数组越界异常
		NullPointerException：空指针异常
		IllegalArgumentException：非法参数异常
		NegativeArraySizeException：数组长度为负异常
		IllegalStateException：非法状态异常
		CLassCastException：类型转换异常
	UncheckedException
		NoSuchFieldException：表示该类没有指定名称抛出来的异常
		NoSuchMethodException：表示该类没有指定方法抛出来的异常
		IllegalAccessException：不允许访问某个类的异常
		CLassNotFoundException：类没有找到抛出来的异常

Java内存模型组成部分
	所有线程共享的数据区：方法区（Method Area）、堆（Heap）
	线程隔离的数据区：虚拟机栈（VM Stack）、本地方法栈（Native Method Stack）、程序计数器（Program Counter Register）

不会发生内存泄漏(OutOfMemoryError)的区域：
	程序计数器（原理：控制着计算机指令的分支、循环、跳转、异常处理和线程恢复，并且程序计数器每个线程是私有的）
内存泄漏：
	虚拟机栈：
		如果线程请求的栈深度大于虚拟机栈所允许的深度，会出现StackOverflowError
		如果虚拟机动态扩展无法申请到足够的内存，会出现OutOfMemoryError
	本地方法栈：同虚拟机栈
	堆：如果堆中没有内存完成实例分配，并且堆无法扩展时，将抛出OutOfMemoryError
	方法区：方法区无法满足内存需求时，将抛出OutOfMemoryError
	
线程私有
	表示各个线程之间互不影响，独立存储的内存区域

JVM：Java Virtual Machine,Java语言解释器，负责内存的分配（堆栈分配）、回收（GC）、解析class为硬件运行的机器码
JMM：Java Memory Model,定义了JVM在计算机内存（RAM）中的工作方式，线程之间内存刷新的状态，是隶属于JVM的


-------------------------------------五、内部类-----------------------------------------

内部类
	内部类拥有外部类的访问权限
定义内部类的方式
	在方法中定义的内部类（局部内部类）
	定义在作用域内，这个作用域在方法的内部（成员内部类）
	实现了接口的匿名类（匿名内部类）
	匿名类，扩展了非默认构造器的类
	匿名类，执行字段初始化操作
	匿名类，通过实例初始化实现构造


-------------------------------------六、集合-----------------------------------------

